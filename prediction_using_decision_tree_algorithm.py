# -*- coding: utf-8 -*-
"""Prediction using Decision Tree Algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-ZIhwcDKZSru-y2zn4GiNd6TAxspR0K

INTERMEDIATE LEVEL TASK - 1

**NAME : KIRUTHIKA S**

**LANGUAGE : PYTHON**

#Prediction using Decision Tree  Algorithm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/Iris.csv - Iris.csv (3).csv")

df.head()

df.shape

df.info()

df.isna().sum()

#dropping the ID column as it is unique
df.drop("SepalLengthCm", axis=1 , inplace=True)

df.describe()

#Plotting distribution of data
plt.figure(figsize=(10,5))
sns.scatterplot(data=df, s=100, alpha=0.7)
plt.grid()
plt.show()

#Extracting independent & dependent variables from dataset
x = df.iloc[:,:-1]
y = df.iloc[:,-1]

#train test splitting
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=0)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier( criterion="entropy" , max_depth = 4 )
classifier.fit(x_train,y_train)

y_pred = classifier.predict(x_test)
y_pred

from sklearn import metrics
metrics.accuracy_score(y_test , y_pred)

from sklearn.metrics import confusion_matrix
matrix=confusion_matrix(y_test,y_pred)
matrix

#Text representation of the Decision Tree

from  io import StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree
from sklearn.tree import export_graphviz

text_rep = tree.export_text(classifier)
print(text_rep)

# export_graphviz function converts decision tree classifier into dot file and pydotplus convert this dot file to png or displayable form on Jupyter.
dot_data =StringIO()
filename = "iris_classification.png"
features=df.columns.tolist()[:-1] #column names
target=df['Species'].unique() #target column
fig = plt.figure(figsize=(15,15))
dt = tree.export_graphviz(classifier, feature_names=features, out_file=dot_data, 
                          class_names=target, filled=True,rotate=False,rounded = True,
                         special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200),dpi=100)
plt.imshow(img,interpolation='nearest')

